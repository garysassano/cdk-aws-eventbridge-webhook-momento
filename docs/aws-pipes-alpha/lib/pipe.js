"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pipe = exports.DesiredState = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_pipes_1 = require("aws-cdk-lib/aws-pipes");
const logs_1 = require("./logs");
/**
 * The state the pipe should be in.
 */
var DesiredState;
(function (DesiredState) {
    /**
     * The pipe should be running.
     */
    DesiredState["RUNNING"] = "RUNNING";
    /**
     * The pipe should be stopped.
     * */
    DesiredState["STOPPED"] = "STOPPED";
})(DesiredState || (exports.DesiredState = DesiredState = {}));
class PipeBase extends aws_cdk_lib_1.Resource {
}
/**
 * An imported pipe.
 */
class ImportedPipe extends PipeBase {
    constructor(scope, id, pipeName) {
        super(scope, id);
        this.pipeName = pipeName;
        this.pipeArn = aws_cdk_lib_1.Stack.of(this).formatArn({
            service: 'pipes',
            partition: 'aws',
            resource: 'pipe',
            resourceName: this.pipeName,
        });
        this.pipeRole = aws_iam_1.Role.fromRoleName(this, 'Role', this.pipeName);
    }
}
/**
 * Amazon EventBridge Pipes connects sources to targets.
 *
 * Pipes are intended for point-to-point integrations between supported sources and targets,
 * with support for advanced transformations and enrichment.
 *
 * @see https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html
 */
class Pipe extends PipeBase {
    /**
     * Creates a pipe from the name of a pipe.
     */
    static fromPipeName(scope, id, pipeName) {
        return new ImportedPipe(scope, id, pipeName);
    }
    constructor(scope, id, props) {
        super(scope, id, { physicalName: props.pipeName });
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_pipes_alpha_PipeProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, Pipe);
            }
            throw error;
        }
        /**
         * Role setup
         */
        this.pipeRole =
            props.role ||
                new aws_iam_1.Role(this, 'Role', {
                    assumedBy: new aws_iam_1.ServicePrincipal('pipes.amazonaws.com'),
                });
        /**
         * Source / Filter setup
         */
        const source = props.source.bind(this);
        props.source.grantRead(this.pipeRole);
        // Add the filter criteria to the source parameters
        const sourceParameters = {
            ...source.sourceParameters,
            filterCriteria: props.filter,
        };
        /**
         * Enrichment setup
         */
        const enrichment = props.enrichment?.bind(this);
        props.enrichment?.grantInvoke(this.pipeRole);
        /**
         * Target setup
         */
        const target = props.target.bind(this);
        props.target.grantPush(this.pipeRole);
        /**
         * Logs setup
         */
        const initialLogConfiguration = {
            level: props.logLevel || logs_1.LogLevel.ERROR,
            includeExecutionData: props.logIncludeExecutionData || undefined,
        };
        // Iterate over all the log destinations and add them to the log configuration
        const logConfiguration = props.logDestinations?.reduce((currentLogConfiguration, destination) => {
            const logDestinationConfig = destination.bind(this);
            destination.grantPush(this.pipeRole);
            const additionalLogConfiguration = logDestinationConfig.parameters;
            return { ...currentLogConfiguration, ...additionalLogConfiguration };
        }, initialLogConfiguration);
        /**
         * Pipe resource
         */
        const resource = new aws_pipes_1.CfnPipe(this, 'Resource', {
            name: props.pipeName,
            description: props.description,
            roleArn: this.pipeRole.roleArn,
            source: props.source.sourceArn,
            sourceParameters: sourceParameters,
            enrichment: props.enrichment?.enrichmentArn,
            enrichmentParameters: enrichment?.enrichmentParameters,
            target: props.target.targetArn,
            targetParameters: target.targetParameters,
            desiredState: props.desiredState,
            logConfiguration: logConfiguration,
            tags: props.tags,
        });
        this.pipeName = resource.ref;
        this.pipeArn = resource.attrArn;
    }
}
exports.Pipe = Pipe;
_a = JSII_RTTI_SYMBOL_1;
Pipe[_a] = { fqn: "@aws-cdk/aws-pipes-alpha.Pipe", version: "2.155.0-alpha.0" };
//# sourceMappingURL=data:application/json;base64,