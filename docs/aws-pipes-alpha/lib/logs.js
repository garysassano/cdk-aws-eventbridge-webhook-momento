"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogLevel = exports.IncludeExecutionData = void 0;
/**
 * Log data configuration for a pipe.
 */
var IncludeExecutionData;
(function (IncludeExecutionData) {
    /**
     * Specify ALL to include the execution data (specifically, the payload, awsRequest, and awsResponse fields) in the log messages for this pipe.
     */
    IncludeExecutionData["ALL"] = "ALL";
})(IncludeExecutionData || (exports.IncludeExecutionData = IncludeExecutionData = {}));
/**
 * Log configuration for a pipe.
 *
 * @see https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-logs.html#eb-pipes-logs-level
 */
var LogLevel;
(function (LogLevel) {
    /**
     * No logging
     */
    LogLevel["OFF"] = "OFF";
    /**
     * Log only errors
     */
    LogLevel["ERROR"] = "ERROR";
    /**
     * Log errors, warnings, and info
     */
    LogLevel["INFO"] = "INFO";
    /**
     * Log everything
     */
    LogLevel["TRACE"] = "TRACE";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9ncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxvZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBSUE7O0dBRUc7QUFDSCxJQUFZLG9CQUtYO0FBTEQsV0FBWSxvQkFBb0I7SUFDOUI7O09BRUc7SUFDSCxtQ0FBVyxDQUFBO0FBQ2IsQ0FBQyxFQUxXLG9CQUFvQixvQ0FBcEIsb0JBQW9CLFFBSy9CO0FBRUQ7Ozs7R0FJRztBQUNILElBQVksUUFpQlg7QUFqQkQsV0FBWSxRQUFRO0lBQ2xCOztPQUVHO0lBQ0gsdUJBQVcsQ0FBQTtJQUNYOztPQUVHO0lBQ0gsMkJBQWUsQ0FBQTtJQUNmOztPQUVHO0lBQ0gseUJBQWEsQ0FBQTtJQUNiOztPQUVHO0lBQ0gsMkJBQWUsQ0FBQTtBQUNqQixDQUFDLEVBakJXLFFBQVEsd0JBQVIsUUFBUSxRQWlCbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJUm9sZSB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0IHsgQ2ZuUGlwZSB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1waXBlcyc7XG5pbXBvcnQgeyBJUGlwZSB9IGZyb20gJy4vcGlwZSc7XG5cbi8qKlxuICogTG9nIGRhdGEgY29uZmlndXJhdGlvbiBmb3IgYSBwaXBlLlxuICovXG5leHBvcnQgZW51bSBJbmNsdWRlRXhlY3V0aW9uRGF0YSB7XG4gIC8qKlxuICAgKiBTcGVjaWZ5IEFMTCB0byBpbmNsdWRlIHRoZSBleGVjdXRpb24gZGF0YSAoc3BlY2lmaWNhbGx5LCB0aGUgcGF5bG9hZCwgYXdzUmVxdWVzdCwgYW5kIGF3c1Jlc3BvbnNlIGZpZWxkcykgaW4gdGhlIGxvZyBtZXNzYWdlcyBmb3IgdGhpcyBwaXBlLlxuICAgKi9cbiAgQUxMID0gJ0FMTCcsXG59XG5cbi8qKlxuICogTG9nIGNvbmZpZ3VyYXRpb24gZm9yIGEgcGlwZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9ldmVudGJyaWRnZS9sYXRlc3QvdXNlcmd1aWRlL2ViLXBpcGVzLWxvZ3MuaHRtbCNlYi1waXBlcy1sb2dzLWxldmVsXG4gKi9cbmV4cG9ydCBlbnVtIExvZ0xldmVsIHtcbiAgLyoqXG4gICAqIE5vIGxvZ2dpbmdcbiAgICovXG4gIE9GRiA9ICdPRkYnLFxuICAvKipcbiAgICogTG9nIG9ubHkgZXJyb3JzXG4gICAqL1xuICBFUlJPUiA9ICdFUlJPUicsXG4gIC8qKlxuICAgKiBMb2cgZXJyb3JzLCB3YXJuaW5ncywgYW5kIGluZm9cbiAgICovXG4gIElORk8gPSAnSU5GTycsXG4gIC8qKlxuICAgKiBMb2cgZXZlcnl0aGluZ1xuICAgKi9cbiAgVFJBQ0UgPSAnVFJBQ0UnLFxufVxuXG4vKipcbiAqIExvZyBkZXN0aW5hdGlvbiBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTG9nRGVzdGluYXRpb25QYXJhbWV0ZXJzIHtcbiAgLyoqXG4gICAqIFRoZSBsb2dnaW5nIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MgZm9yIHRoZSBwaXBlLlxuICAgKlxuICAgKiBAc2VlIGh0dHA6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0FXU0Nsb3VkRm9ybWF0aW9uL2xhdGVzdC9Vc2VyR3VpZGUvYXdzLXByb3BlcnRpZXMtcGlwZXMtcGlwZS1waXBlbG9nY29uZmlndXJhdGlvbi5odG1sI2Nmbi1waXBlcy1waXBlLXBpcGVsb2djb25maWd1cmF0aW9uLWNsb3Vkd2F0Y2hsb2dzbG9nZGVzdGluYXRpb25cbiAgICpcbiAgICogQGRlZmF1bHQgLSBub25lXG4gICAqL1xuICByZWFkb25seSBjbG91ZHdhdGNoTG9nc0xvZ0Rlc3RpbmF0aW9uPzogQ2ZuUGlwZS5DbG91ZHdhdGNoTG9nc0xvZ0Rlc3RpbmF0aW9uUHJvcGVydHk7XG5cbiAgLyoqXG4gICAqIFRoZSBBbWF6b24gS2luZXNpcyBEYXRhIEZpcmVob3NlIGxvZ2dpbmcgY29uZmlndXJhdGlvbiBzZXR0aW5ncyBmb3IgdGhlIHBpcGUuXG4gICAqXG4gICAqIEBzZWUgaHR0cDovL2RvY3MuYXdzLmFtYXpvbi5jb20vQVdTQ2xvdWRGb3JtYXRpb24vbGF0ZXN0L1VzZXJHdWlkZS9hd3MtcHJvcGVydGllcy1waXBlcy1waXBlLXBpcGVsb2djb25maWd1cmF0aW9uLmh0bWwjY2ZuLXBpcGVzLXBpcGUtcGlwZWxvZ2NvbmZpZ3VyYXRpb24tZmlyZWhvc2Vsb2dkZXN0aW5hdGlvblxuICAgKlxuICAgKiBAZGVmYXVsdCAtIG5vbmVcbiAgICovXG4gIHJlYWRvbmx5IGZpcmVob3NlTG9nRGVzdGluYXRpb24/OiBDZm5QaXBlLkZpcmVob3NlTG9nRGVzdGluYXRpb25Qcm9wZXJ0eTtcblxuICAvKipcbiAgICogVGhlIEFtYXpvbiBTMyBsb2dnaW5nIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MgZm9yIHRoZSBwaXBlLlxuICAgKlxuICAgKiBAc2VlIGh0dHA6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0FXU0Nsb3VkRm9ybWF0aW9uL2xhdGVzdC9Vc2VyR3VpZGUvYXdzLXByb3BlcnRpZXMtcGlwZXMtcGlwZS1waXBlbG9nY29uZmlndXJhdGlvbi5odG1sI2Nmbi1waXBlcy1waXBlLXBpcGVsb2djb25maWd1cmF0aW9uLXMzbG9nZGVzdGluYXRpb25cbiAgICpcbiAgICogQGRlZmF1bHQgLSBub25lXG4gICAqL1xuICByZWFkb25seSBzM0xvZ0Rlc3RpbmF0aW9uPzogQ2ZuUGlwZS5TM0xvZ0Rlc3RpbmF0aW9uUHJvcGVydHk7XG59XG5cbi8qKlxuICogTG9nIGRlc3RpbmF0aW9uIGNvbmZpZ3VyYXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTG9nRGVzdGluYXRpb25Db25maWcge1xuICAvKipcbiAgICogR2V0IHRoZSBsb2cgZGVzdGluYXRpb24gY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzLlxuICAgKi9cbiAgcmVhZG9ubHkgcGFyYW1ldGVyczogTG9nRGVzdGluYXRpb25QYXJhbWV0ZXJzO1xufVxuXG4vKipcbiAqIExvZyBkZXN0aW5hdGlvbiBiYXNlIGNsYXNzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElMb2dEZXN0aW5hdGlvbiB7XG5cbiAgLyoqXG4gICAqIEJpbmQgdGhlIGxvZyBkZXN0aW5hdGlvbiB0byB0aGUgcGlwZS5cbiAgICovXG4gIGJpbmQocGlwZTogSVBpcGUpOiBMb2dEZXN0aW5hdGlvbkNvbmZpZztcblxuICAvKipcbiAgICogR3JhbnQgdGhlIHBpcGUgcm9sZSB0byBwdXNoIHRvIHRoZSBsb2cgZGVzdGluYXRpb24uXG4gICAqL1xuICBncmFudFB1c2goZ3JhbnRlZTogSVJvbGUpOiB2b2lkO1xufVxuIl19